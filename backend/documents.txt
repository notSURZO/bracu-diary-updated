CSE460: VLSI Design, Pre-requisite: CSE260. Introduction to VLSI (Very Large Scale Integration) design: history, IC trends, technology & design approaches. Moore’s law. Review of digital logic design. Introduction to logic circuit families: n-MOS, p-MOS, pseudo n-MOS and CMOS technologies. Introduction to CMOS logic. Pull-up and pull-down networks, implementation using series and parallel MOSFETs. Combinational logic circuit design using CMOS. Complex gate design using CMOS such as And-Or-Invert or Or-And-Invert. Implementation of different circuit elements like basic gates. Multiplexers, encoder, latch, flip-flops using CMOS. Introduction to FSM (Finite State Machine): Moore type & Mealy type FSM hardware implementation. State encoding & minimization techniques. Integrated circuit fabrication technology: photolithography, CMOS process flow, design rules. Estimation of resistance and capacitance from layout. Layout comparison. Stick diagram and area estimation. Eulerian paths. CMOS transistor theory: modes of operation. Derivation of I-V characteristics. MOS capacitance. DC Response of CMOS gates: n-MOS & p-MOS pass transistors. Logic levels and noise margins. DC transfer characteristics. CMOS Power: instantaneous and average power, energy. Power analysis of circuit elements (R, C, DC Supply). Switching waveforms of an inverter. Static power and Dynamic power. Activity factor. Power reduction techniques: Clock gating, Power gating, Dynamic voltage scaling. Transient response of CMOS gates. Delay definitions: rise time, fall time, propagation delay and contamination delay, RC delay model. Effective resistance & capacitance. Elmore delay. Parasitic and effort delay. Fan-in and fan-out. Layout comparisons. Physical design of ICs: floorplanning, partitioning, routing, clock tree synthesis, KL Algorithm for partitioning, Lee’s algorithm for global routing.

Course objectives are: 1. The objectives of this course are to give a brief introduction to the complete process of chip designing 2. provide background knowledge to design, simulate and implement combinational & sequential CMOS circuits 3. teach theoretical concepts to critically analyze the cost & performance of an IC 4. expose the students to the fabrication process & physical design aspects of CMOS IC design 5. introduce the necessary programming language/softwares such as: Verilog (programming language), Quartus II, Microwind & DSCH2 to design, simulate, visualize and verify CMOS logic circuits and layouts

List of Books: 1. CMOS VLSI Design: A Circuits and Systems Perspective,Neil H. E. Weste & David Money Harris,2011,4th ed.,Addison-Wesley,ISBN 13: 978-0-321-54774-3 2. Fundamentals of Digital Logic with Verilog Design,Stephen Brown & Zvonko Vranesic,2014,3rd ed.,McGraw-Hill,ISBN 978–0–07–338054–4

Course Materials: Lecture notes and presentation slides, Class notes, Lab handouts and presentation slides, Softwares: Quartus II, DSCH2, Microwind (shall be provided at on-campus computer labs)

CSE320: Data Communications. This course provides an introduction to the purpose and methods of communication. It covers the principles of networking using the protocol layering of the Internet and the TCP/IP protocol suite. Starting from the Physical layer, the course explores analog and digital data and signals, performance measurements, noise effects and control. Topics include data rate limits, analog-to-digital conversion methods, modulation, and bandwidth utilization techniques. The course also covers Data Link layer concepts and services such as error detection and multiple-access protocols.

Course objectives are: 1. Introduce students to the fundamental concepts of data communication. 2. Explain the principles of networking through protocol layering of the Internet. 3. Teach the necessity of modulation, analog-to-digital conversion methods, and multiplexing techniques. 4. Explain effects of noise, error detection, and control mechanisms.

List of Books: 1. Data Communication and Networking by Behrouz A. Forouzan, 5th Edition, McGraw-Hill (2017). ISBN: 1259064751 2. Data and Computer Communications by William Stallings, 10th Edition, Pearson (2013). ISBN: 0133506487

CSE321: Operating Systems, Soft Pre-requisite: CSE340, Pre-requisite: CSE221. This course provides a general understanding of the principles and concepts governing the functions of operating systems and acquaints students with the state-of-the-art approaches that make the design, implementation, and operation of complex operating systems possible. The core of the course contains concurrent programming (threads and synchronization), inter-process communication, process and thread management, storage and resource management and communication, and an analysis on security and protection.

Course objectives are: 1. Understand core concepts of OS structures, process management and inter-process communication methods. 2. Interpret CPU schedulers and their functions. 3. Understand the concepts and behaviours of threads and examine the concurrency of multithreading. 4. Inspect thread synchronization mechanisms at the OS level. 5. Understand secondary memory management and file systems concepts and analyse file system implementation. 6. Understand mechanisms of main and virtual memory management in OS. 7. Analyse OS-level security threats and methods used to provide protection.

List of Books: 1. Operating System Concepts Essentials by Abraham Silberschatz, Peter B. Galvin and Greg Agne, Wiley; 10th Edition (2008). ISBN: 978-1119320913 2. Modern Operating Systems by Tanenbaum A.S., Prentice Hall; 4th Edition (2015). ISBN: 978-0133591620 3. Operating Systems: Three Easy Pieces by Remzi H. Arpaci-Dusseau and Andrea C. Arpaci-Dusseau, Arpaci-Dusseau Books; Version 1.10 (October 2023).

CSE370: Database, Pre-requisite: CSE221. This course is an introduction to relational database management systems (RDBMS), focusing on the efficient design, implementation, and optimization of an RDBMS. Topics include advantages and disadvantages of DBMS, database architecture, data modeling using ER and EER models, relational integrity constraints, relational schema mapping from ER/EER, indexing, hashing, and normalization. SQL query formulation is extensively practiced in both theoretical and laboratory components. The course includes a compulsory 3-hour weekly lab (CSE370L) where students complete hands-on SQL assignments and a group project involving the design and implementation of a complete database system with a user interface.

Course objectives are: 1. Explain the advantages and disadvantages of DBMS over file-based systems. 2. Explain data modeling using ER and EER models. 3. Discuss relational integrity constraints and their enforcement. 4. Teach mapping from ER/EER models to relational schema. 5. Introduce indexing and hashing for efficient data retrieval. 6. Explain functional dependencies (FD) and normalization for database optimization. 7. Teach storing, manipulating, and retrieving data using SQL. 8. Expose students to implementing a complete database system project in teams using software tools, programming languages, and SQL.

List of Books: 1. Fundamentals of Database Systems by Ramez Elmasri and Shamkant B. Navathe, 7th Edition, Pearson (2015). ISBN: 978-0133970777 2. Database Systems: A Practical Approach to Design, Implementation, and Management by Thomas M. Connolly and Carolyn E. Begg, 6th Edition, Pearson (2014). ISBN: 978-0132943260 3. Database System Concepts by Abraham Silberschatz, Henry F. Korth, and S. Sudarshan, 6th Edition, McGraw-Hill (2011). ISBN: 978-0073523323

Course Materials: Text and reference books, lecture slides, lab handouts, command line tool (MySQL Mini Server).

CSE360: Computer Interfacing, Pre-requisite: CSE341. This course provides an overview of computer interface components and their characteristics. It covers programmable interfacing ICs, sensors, sensor calibration (hardware and software), and processing devices that enable computers to interact with the real world. Topics include high-power interface devices, LEDs, LCDs, seven-segment displays, transducers, stepper motors, and peripheral devices. The course also introduces software simulation tools for developing interfacing systems. Advanced topics such as Human-Computer Interface (HCI) and Brain-Computer Interface (BCI) are included with case studies.
Course objectives are: 1. Introduce interfacing concepts, components, and their characteristics. 2. Outline the mechanisms of sensors, sensing devices, hall-effect sensing, and real-life sensor applications. 3. Describe I/O interfacing including GPIO using MCU/MPU boards and explain how Programmable Peripheral Interface (PPI) 82C55 works. 4. Explain the working of disks, drums, motors, and printers and their applications. 5. Describe communication protocols such as I2C, SPI, UART, USART, and USB. 6. Explain the principles of interfacing LCDs, LEDs, seven-segment displays, keyboards, and mice.
List of Books: 1. Microprocessor Architecture, Programming, and Applications with the 8085 by Ramesh S. Gaonkar, 5th Edition, Penram International (1984). ISBN: 8187972092 2. Introduction to ARM Cortex Microcontroller by Jonathan Valvano, 5th Edition, Createspace (2012). ISBN: 9781477508992 3. Embedded Microcomputer Systems: Real Time Interfacing by Jonathan Valvano, 3rd Edition, Cengage Learning (2014). ISBN: 9781111426255
Course Materials: Text and reference books, lectures available at bux, presentation slides, word files, book chapter PDFs, videos, and links.

CSE340: Computer Architecture, Pre-requisite: CSE260. This course provides a systematic study of the elements of computer design, including circuit design, storage mechanisms, addressing schemes, and approaches to parallelism and distributed logic. Topics include information representation and transfer, instruction and data access methods, control units (hardware and microprogrammed), memory organization, and an introduction to RISC and CISC architectures.

Course objectives are: 1. Introduce processor technologies, performance metrics, number representation, and arithmetic operations. 2. Introduce MIPS architecture, instruction formats, and translation of simple C/Java code snippets to MIPS assembly. 3. Teach processor datapath design, identify pipelining hazards, and apply techniques to overcome them. 4. Explain memory hierarchy and performance analysis. 5. Introduce parallel architecture and parallel programming.

List of Books: 1. Computer Organization and Design: The Hardware/Software Interface by David A. Patterson and John L. Hennessy, 5th Edition, Morgan Kaufmann (2013). ISBN: 9780124077263 2. Computer Architecture: A Quantitative Approach by David A. Patterson and John L. Hennessy, 6th Edition, Morgan Kaufmann (2017). ISBN: 9780128119051 3. Computer Architecture and Organization by John P. Hayes, 3rd Edition, McGraw-Hill (1997). ISBN: 0070273669

Course Materials: Text and reference books, lecture notes, and other resources made available on buX.

CSE330: Numerical Methods, Pre-requisite: MAT216. This course covers fixed point arithmetic, polynomial interpolation, differentiation, nonlinear equations, linear equations, least-squares approximation, and numerical integration.

Course objectives are: 1. Recognize the need for numerical analysis and the importance of error analysis. 2. Learn methods to linearize polynomials and apply differentiation and integration using approximations. 3. Solve linearized equations using linear algebra techniques such as Gaussian elimination and QR decomposition.

List of Books: 1. Numerical Analysis II – Lecture Notes by Anthony Yeates, Durham University (2018). 2. Numerical Methods in Engineering with Python by Jaan Kiusalaas, 1st Edition, Cambridge University Press (2005). ISBN: 9780521852876 3. Numerical Analysis by Richard L. Burden and J. Douglas Faires, 9th Edition, Brooks/Cole Cengage Learning (2011). ISBN: 9780538733519

Course Materials: Text and reference books, lecture notes, handouts.

CSE331: Automata and Computability, Pre-requisite: CSE221. This course covers the theory of computation, beginning with alphabets, strings, and languages. Topics include deterministic and nondeterministic finite automata (DFA, NFA), regular languages, regular operations, closure properties, and equivalence between DFA, NFA, and regular expressions. Students learn conversions between regular expressions and finite automata, and proofs of nonregularity using the pumping lemma. The course also covers context-free grammars (CFG) and context-free languages (CFL), parse trees, derivations, ambiguity, Chomsky Normal Form (CNF), and the CYK algorithm. Further topics include pushdown automata (PDA) and their equivalence with CFGs, Turing machines (TM), Turing-recognizable and Turing-decidable languages, TM variants, undecidability, the Halting Problem, and reducibility.

Course objectives are: 1. Explain the fundamentals of formal languages, grammars, and automata theory. 2. Provide knowledge of finite automata, regular expressions, and their equivalence in representing regular languages. 3. Provide knowledge of context-free grammars, pushdown automata, and their equivalence in representing context-free languages. 4. Equip students with tools to demonstrate the limitations of computational models.

List of Books: 1. Introduction to the Theory of Computation by Michael Sipser, 3rd Edition, Cengage (2013). 2. Introduction to Automata Theory, Languages, and Computation by John E. Hopcroft, Rajeev Motwani, and Jeffrey D. Ullman, 3rd Edition, Prentice Hall (2006).

CSE341: Microprocessors, Soft Pre-requisite: CSE340, Pre-requisite: None. This course introduces the architecture, working mechanisms, and functionality of microprocessors, with a primary focus on the Intel 8086. Topics include 8086 architecture, memory partitioning, registers, instruction set, timing diagrams, and interrupt structure. The course also covers I/O addressing, Direct Memory Access (DMA), cascading, and concepts of later Intel 80x86 processors and their basic architecture. A compulsory 3-hour laboratory session each week is included, focusing on assembly programming and device interfacing.
Course objectives are: 1. Familiarize students with the components of a microcomputer system and the internal architecture of the Intel 8086. 2. Introduce the instruction set, addressing modes, and address translation techniques of the 8086. 3. Discuss clock signals and develop timing diagrams. 4. Explain interrupt handling in the 8086 and the functionalities of the 8259A PIC. 5. Assess the advantages of direct memory access and study the 8237 DMA controller. 6. Introduce later processors (80x86) and compare their components and basic features. 7. Develop assembly language programs and learn device interfacing using hardware kits.

List of Books: 1. Microprocessors and Interfacing by Douglas V. Hall, 2nd Edition, McGraw-Hill (1992). ISBN: 9780071004626 2. Assembly Language Programming and Organization of the IBM PC by Ytha Yu and Charles Marut, International Edition, McGraw-Hill (1992). ISBN: 9780070726925 3. The Intel Microprocessors: Architecture, Programming, and Interfacing by Barry B. Brey, 8th Edition, Pearson Prentice Hall (2009). ISBN: 9780135026458

Course Materials: Text and reference books, lecture notes and slides, lab handouts, lab usage manual, emulator (emu8086).

CSE220: Data Structures, Pre-requisite: CSE111. This course introduces elementary data structures such as arrays, lists, stacks, queues, and trees. These data structures are applied in implementing algorithms for sorting, searching, and tree traversal. The course includes a compulsory 3-hour weekly lab (CSE220L), where students implement data structures and algorithms in a standard programming language, typically Java.

Course objectives are: 1. Teach the basics of circular arrays and their advantages over linear arrays. 2. Demonstrate the construction and manipulation of various linked lists. 3. Introduce stack and queue data structures and explain their implementations. 4. Discuss the fundamental concept of recursion for building recursive problem-solving models. 5. Explain tree structures and related algorithms.

List of Books: 1. Algorithms in Java by Robert Sedgewick and Kevin Wayne, 4th Edition, Addison-Wesley (2011). ISBN: 032157351X / 9780321573513 2. Introduction to Algorithms by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein, 3rd Edition, MIT Press (2009). ISBN: 0262033844 / 9780262033848
Course Materials: Text and reference books.

CSE221: Algorithm Analysis & Design, Pre-requisite: CSE220. This course focuses on the study of efficient algorithms, their analysis, and effective design techniques. Topics include standard design strategies such as divide-and-conquer, greedy methods, dynamic programming, and backtracking. Core content covers sorting, searching, graph algorithms (shortest paths, DFS, BFS, network flow, minimum spanning tree), computational geometry, hashing, heaps, integer arithmetic (GCD, primality), polynomial and matrix calculations, asymptotic analysis, lower bound theory, NP-hard and NP-complete problems, correctness proofs, and complexity analysis. The course includes a compulsory 3-hour weekly laboratory session emphasizing practical implementation.

Course objectives are: 1. Introduce students to time and space complexity of algorithms. 2. Teach different sorting and searching methods and guide students in selecting effective approaches. 3. Familiarize students with problem-solving paradigms including divide-and-conquer, greedy, dynamic programming, backtracking, and others.

List of Books: 1. Introduction to Algorithms by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein, 3rd Edition, MIT Press (2009). ISBN: 9780262033848 2. Algorithm Design by Jon Kleinberg and Éva Tardos, 1st Edition, Pearson (2005). ISBN: 9780321295354 3. Algorithms by Sanjoy Dasgupta, Christos H. Papadimitriou, and Umesh Vazirani, 1st Edition, McGraw-Hill (2006). ISBN: 9780073523408 4. Algorithms Illuminated by Tim Roughgarden, 1st Edition, Cambridge University Press (2022). ISBN: 9780999282984

Course Materials: Lecture notes and slides, VisuAlgo website for algorithm visualization.

CSE421: Computer Networks, Soft Pre-requisite: CSE320. This course introduces the fundamental concepts in the design and implementation of computer communication networks, their protocols, and applications. Topics include network architectures, applications, network programming interfaces (e.g., sockets), transport and congestion control, routing, data link protocols, addressing, LANs, wireless networks, and network security. Examples and case studies are drawn primarily from the Internet, including the TCP, UDP, and IP protocol suite.

Course objectives are: 1. Introduce concepts of network architectures, topologies, layering, and protocols. 2. Describe key application layer concepts such as network services, clients, and servers. 3. Explain transport layer concepts, relationships with other layers, and principles of reliable data transfer and congestion control. 4. Teach network layer concepts, routing principles, algorithms, addressing, and Internet protocols. 5. Identify link layer services, link addressing, and multiple access techniques. 6. Provide basic knowledge of cryptography and network security. 7. Explain wireless LANs based on IEEE 802.11 standards and mobility. 8. Use simulation tools to observe and analyze protocol behaviors. 9. Design and implement a small organizational network.

List of Books: 1. Computer Networking: A Top-Down Approach by James F. Kurose and Keith W. Ross, 7th Edition, Pearson (2016). ISBN: 9780133594140 2. Computer Networks: A Systems Approach by Larry L. Peterson and Bruce S. Davie, 5th Edition, Morgan Kaufmann (2011). ISBN: 9780123850591
Course Materials: Lectures, textbooks, Cisco Online Curriculum access.

CSE470: Software Engineering, Pre-requisite: CSE370. This course introduces students to all aspects of the Software Development Life Cycle (SDLC) and familiarizes them with standard practices and techniques in the software industry. It aims to bridge the gap between academic learning and industry practice. Students work on projects where they perform requirement analysis and develop systems following industry best practices.

Course objectives are: 1. Introduce fundamental concepts of the SDLC. 2. Teach requirement analysis of systems. 3. Familiarize students with professional practices and rules followed by software engineers in industry. 4. Explain software construction using design patterns. 5. Teach programming process management and documentation. 6. Guide students in building systems with modern tools. 7. Explain software development processes and methodologies.

List of Books: 1. Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin, PHI (2017). ISBN: 9780132350884 2. Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, Addison-Wesley (1994). ISBN: 0201633612

Course Materials: Text and reference books, lecture notes, and presentation slides.

CSE471: System Analysis and Design, Pre-requisite: CSE370. This course introduces students to tools and techniques in systems analysis and design such as data flow diagrams (DFDs) and entity-relationship (ER) diagrams. Students complete projects where they analyze requirements and design systems using these tools. The course also includes a compulsory 3-hour weekly laboratory session.

Course objectives are: 1. Introduce fundamental concepts of system analysis and design. 2. Teach structural models of systems. 3. Teach behavioral models of systems. 4. Explain how to create physical models of systems. 5. Teach students programming process management and documentation. 6. Guide students in building systems with modern tools.

List of Books: 1. Systems Analysis and Design by Alan Dennis, Barbara Haley Wixom, and Roberta M. Roth, 8th Edition, Prentice Hall (2021). ISBN: 9781119803782

Course Materials: 1. Elements of system analysis and design, steps of SDLC. 2. Identifying project business value, preparing system requests, feasibility studies. 3. Behavioral UML diagrams (use case, activity, sequence): notations and derivation from requirements. 4. Structural UML diagrams (data flow diagrams): notations and derivation from requirements. 5. Converting logical to physical process models, designing programs, structure charts, and specifications. 6. Logical to physical data models, data storage formats, and optimization. 7. Principles and processes of user interface design: navigation, input, and output design.

CSE422: Artificial Intelligence, Pre-requisite: CSE221. This course introduces the foundations of artificial intelligence, including rationality, intelligent agents, and their structures. Topics include problem representation, task environments, uninformed and informed search strategies, constraint satisfaction problems, rule chaining, inference, and learning in intelligent systems. Applications discussed include general problem solving, game playing, expert systems, recognition, understanding, and translation. Additional topics cover heuristic vs. algorithmic programming, cognitive simulation vs. machine intelligence, and robotics. Students also practice solving problems using AI programming languages.

Course objectives are: 1. Introduce the concept of artificial intelligence and rationality. 2. Analyze problem-solving strategies for informed/uninformed problems, stochastic and deterministic games, and constraint satisfaction. 3. Present algorithms with analysis of complexity, optimality, and completeness. 4. Develop skills to formulate problems and strategies for solutions. 5. Introduce uncertain knowledge and probabilistic reasoning. 6. Teach probabilistic and logic models for decision-making. 7. Introduce the basics of machine learning.

List of Books: 1. Artificial Intelligence: A Modern Approach by Stuart Russell and Peter Norvig, 3rd Edition, Pearson Education (2010). ISBN: 9780136042594

CSE461: Introduction to Robotics, Pre-requisites: CSE260, CSE341, CSE360. This course introduces robotics by covering basic laws, architectures, control systems, perception techniques, and communication. It also explores kinematics, motor action, mechanical engineering issues, advanced communication protocols, and the use of AI in robotics. Students gain both theoretical understanding and hands-on practice in designing and developing hardware and software components of robots.

Course objectives are: 1. Introduce basic laws, architectures, control systems, perception techniques, and communication. 2. Explain kinematics, motor action, mechanical engineering issues, advanced communication protocols, and applications of AI in robotics. 3. Teach implementation of algorithms for 4DOF arm control, including forward and inverse kinematics, control systems, and navigation. 4. Introduce vision-based robotics using cameras, sensors, machine learning, and deep learning algorithms. 5. Present communication protocols such as I2C, UART, USB, SPI, RS-485, CAN bus, Modbus, LoRa, Bluetooth, RF, Zigbee, and Wi-Fi. 6. Guide students in designing, developing, experimenting with, and documenting robotics projects.

List of Books: 1. Intelligent Systems and Robotics by George W. Zobrist and C.Y. Ho, CRC Press (2000). 2. Springer Handbook of Robotics by Bruno Siciliano and Oussama Khatib, 2nd Edition, Springer (2016). 3. Robotics, Vision and Control: Fundamental Algorithms in MATLAB by Peter Corke, 2nd Edition, Springer (2017). 4. Modern Robotics: Mechanics, Planning, and Control by Kevin M. Lynch and Frank C. Park, Cambridge University Press (2017). 5. Probabilistic Robotics by Sebastian Thrun, Wolfram Burgard, and Dieter Fox, MIT Press (2005). 6. Introduction to Robotics by S.K. Saha, Tata McGraw-Hill (2010). 7. Robotics: Control, Sensing, Vision, and Intelligence by K.S. Fu, Rafael C. Gonzalez, and C.S.G. Lee, McGraw-Hill (2010).

Course Materials: Text and reference books, lecture notes, and additional resources provided on buX.
